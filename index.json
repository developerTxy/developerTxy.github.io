[{"content":" 伤人的沟通方式 ###反问句 沟通中，反问句是非常容易激起对抗情绪的，因为反问代表了质疑，蔑视，责备的感觉 ；如果你想好好沟通那就改点经常反问的习惯， ”难道你之前没有做过吗？ 这你都不会吗？“\n","permalink":"https://developerTxy.github.io/post/booksnotes/%E5%8F%8B%E5%A5%BD%E6%B2%9F%E9%80%9A/","summary":"伤人的沟通方式 ###反问句 沟通中，反问句是非常容易激起对抗情绪的，因为反问代表了质疑，蔑视，责备的感觉 ；如果你想好好沟通那就改点经常反问的习","title":"又好沟通"},{"content":"修改了本地的代码，然后使用： git add file git commit -m \u0026lsquo;修改原因\u0026rsquo; 执行commit后，还没执行push时，想要撤销这次的commit，该怎么办？ 解决方案： 使用命令： git reset \u0026ndash;soft HEAD^ 这样就成功撤销了commit，如果想要连着add也撤销的话，\u0026ndash;soft改为\u0026ndash;hard（删除工作空间的改动代码）。 命令详解： HEAD^ 表示上一个版本，即上一次的commit，也可以写成HEAD~1 如果进行两次的commit，想要都撤回，可以使用HEAD~2 \u0026ndash;soft 不删除工作空间的改动代码 ，撤销commit，不撤销git add file \u0026ndash;hard 删除工作空间的改动代码，撤销commit且撤销add 另外一点，如果commit注释写错了，先要改一下注释，有其他方法也能实现，如： git commit \u0026ndash;amend 这时候会进入vim编辑器，修改完成你要的注释后保存即可。 为了搞清楚原理，我画流程图，找到了一个好的工具：https://www.draw.io/\ngit的工作流 工作区：即自己当前分支所修改的代码，git add xx 之前的！不包括 git add xx 和 git commit xxx 之后的。 暂存区：已经 git add xxx 进去，且未 git commit xxx 的。 本地分支：已经git commit -m xxx 提交到本地分支的。 基本原理如下： 代码回滚 在上传代码到远程仓库的时候，不免会出现问题，任何过程都有可能要回滚代码： 1、在工作区的代码\n1 2 git checkout -- a.txt # 丢弃某个文件，或者 git checkout -- . # 丢弃全部 注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。 2、代码git add到缓存区，并未commit提交\n1 2 git reset HEAD . 或者 git reset HEAD a.txt 这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化 3、git commit到本地分支、但没有git push到远程\n1 2 3 4 5 6 git log # 得到你需要回退一次提交的commit id git reset --hard \u0026lt;commit_id\u0026gt; # 回到其中你想要的某个版 或者 git reset --hard HEAD^ # 回到最新的一次提交 或者 git reset HEAD^ # 此时代码保留，回到 git add 之前 4、git push把修改提交到远程仓库 1）通过git reset是直接删除指定的commit\n1 2 3 git log # 得到你需要回退一次提交的commit id git reset --hard \u0026lt;commit_id\u0026gt; git push origin HEAD --force # 强制提交一次，之前错误的提交就从远程仓库删除 2）通过git revert 用一次新的commit来回滚之前的commit\n1 2 git log # 得到你需要回退一次提交的commit id git revert \u0026lt;commit_id\u0026gt; # 撤销指定的版本，撤销也会作为一次提交进行保存 3） git revert 和 git reset的区别\ngit revert 用一次新的commit来回滚之前的commit，此次提交之前的commit都会被保留； git reset 回到某次提交，提交及之前的commit都会被保留，但是此commit id之后的修改都会被删除 开发过程中，你肯定会遇到这样的场景： 场景一： 糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！ 场景二： 彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！ 场景三： 刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！ 撤销 上述场景一，在未进行git push前的所有操作，都是在“本地仓库”中执行的。我们暂且将“本地仓库”的代码还原操作叫做“撤销”！ 情况一：文件被修改了，但未执行git add操作(working tree内撤销)\n1 2 git checkout fileName git checkout . 情况二：同时对多个文件执行了git add操作，但本次只想提交其中一部分文件\n1 2 $ git add * $ git status 取消暂存 1 $ git reset HEAD \u0026lt;filename\u0026gt; 情况三：文件执行了git add操作，但想撤销对其的修改（index内回滚）\n1 2 3 4 # 取消暂存 git reset HEAD fileName # 撤销修改 git checkout fileName 情况四：修改的文件已被git commit，但想再次修改不再产生新的Commit\n1 2 3 # 修改最后一次提交 $ git add sample.txt $ git commit --amend -m\u0026#34;说明\u0026#34; 情况五：已在本地进行了多次git commit操作，现在想撤销到其中某次Commit\n1 git reset [--hard|soft|mixed|merge|keep] [commit|HEAD] 回滚 上述场景二，已进行git push，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！ 如果你每次更新线上，都会打tag，那恭喜你，你可以很快的处理上述场景二的情况\n1 2 3 4 git checkout \u0026lt;tag\u0026gt; 如果你回到当前HEAD指向 git checkout \u0026lt;branch_name\u0026gt; 情况一：撤销指定文件到指定版本\n1 2 3 4 # 查看指定文件的历史版本 git log \u0026lt;filename\u0026gt; # 回滚到指定commitID git checkout \u0026lt;commitID\u0026gt; \u0026lt;filename\u0026gt; 情况二：删除最后一次远程提交 方式一：使用revert\n1 2 git revert HEAD git push origin master 方式二：使用reset\n1 2 git reset --hard HEAD^ git push origin master -f 二者区别： revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在； reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。 情况三：回滚某次提交\n1 2 3 4 5 6 7 8 9 10 11 # 找到要回滚的commitID git log git revert commitID 删除某次提交 git log --oneline -n5 git rebase -i \u0026#34;commit id\u0026#34;^ 注意：需要注意最后的^号，意思是commit id的前一次提交 git rebase -i \u0026#34;5b3ba7a\u0026#34;^ 代码提交，谁都不希望撤销或者回滚，有时候又迫不得已。掌握这些命令，可以提交代码无忧！\n","permalink":"https://developerTxy.github.io/post/tech/gitlist/git_%E6%9C%AC%E5%9C%B0%E6%92%A4%E9%94%80%E8%BF%9C%E7%A8%8B%E6%92%A4%E9%94%80%E8%AF%A6%E8%A7%A3/","summary":"git 撤销","title":"git撤销命令"},{"content":" hugo content 的目录 在config配置文件中 路径全部用（英文）小写，包含大写字母路径找不到\n","permalink":"https://developerTxy.github.io/post/tech/hugonotes/","summary":"hugo 建站记录","title":"Hugo问题记录"},{"content":" ","permalink":"https://developerTxy.github.io/about/","summary":"","title":"About"},{"content":"title: \u0026ldquo;Search\u0026rdquo; date: \u0026hellip; draft: false layout: search\n","permalink":"https://developerTxy.github.io/chinese/search/","summary":"title: \u0026ldquo;Search\u0026rdquo; date: \u0026hellip; draft: false layout: search","title":""},{"content":"title: \u0026ldquo;Search\u0026rdquo; date: \u0026hellip; draft: false layout: search\n","permalink":"https://developerTxy.github.io/english/search/","summary":"title: \u0026ldquo;Search\u0026rdquo; date: \u0026hellip; draft: false layout: search","title":""}]